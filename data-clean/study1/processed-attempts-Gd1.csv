"csv_file_name","question_name","id","questionusageid","slot","behaviour","questionid","variant","maxmark","minfraction","maxfraction","flagged","questionsummary","rightanswer","responsesummary","timemodified","questionattemptid","sequencenumber","state","fraction","timecreated","userid","username","firstname","lastname","attempt_number","group"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501872,70240,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.9599999321831598,3.062221950954861,3.95111083984375,5.160000271267361,6.1200002034505205,6.7244457668728295,6.9733327229817705] [score]; prt1: prt1-1-T",1574204425,554294,1,"gradedright",1,1574203643,1494,"anon100","anonfirstname100","anonlastname100",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500686,70221,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.8888888888888888,2.9555562337239585,3.9333326551649304,4.955556233723958,5.888888888888889,6.91111077202691,7.9777781168619795] [score]; prt1: prt1-1-T",1573848942,553717,1,"gradedright",1,1573847945,1495,"anon101","anonfirstname101","anonlastname101",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502048,70243,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.0833333333333335,3.0277777777777777,3.9722222222222223,5.027777777777778,5.944444444444445,6.944444444444445,8] [score]; prt1: prt1-1-T",1573646936,554377,1,"gradedright",1,1573645876,1498,"anon104","anonfirstname104","anonlastname104",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500375,70216,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.9166666666666667,2.9444444444444446,3.9722222222222223,4.944444444444445,5.916666666666667,7,7.861111111111111] [score]; prt1: prt1-1-T",1573938882,553577,1,"gradedright",1,1573938225,1503,"anon109","anonfirstname109","anonlastname109",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501329,70231,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574263388,554031,0,"todo",NA,1574101584,1508,"anon114","anonfirstname114","anonlastname114",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503945,70272,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574226482,555307,0,"todo",NA,1574226481,1512,"anon118","anonfirstname118","anonlastname118",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501372,70232,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574105914,554057,0,"todo",NA,1574105913,1517,"anon123","anonfirstname123","anonlastname123",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500894,70224,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1573942244,553813,0,"todo",NA,1573942243,1521,"anon127","anonfirstname127","anonlastname127",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502956,70255,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.9777781168619792,3.0444437662760415,4.199998643663195,5.133332994249132,5.844445122612847,6.777779473198785,7.755555894639757] [score]; prt1: prt1-1-T",1573921825,554798,1,"gradedright",1,1573921776,1525,"anon131","anonfirstname131","anonlastname131",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502928,70254,30,"interactivecountback",23601,1,0,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [6.319864908854167,4.569023980034722,1,4.131313747829861,1,6.286195543077257,3.4242451985677085,4.43434312608507] [score]; prt1: ATSet_wrongsz. | prt1-1-F",1574249680,554784,1,"gradedwrong",0,1574249674,1527,"anon133","anonfirstname133","anonlastname133",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502896,70254,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574249689,554768,0,"todo",NA,1574249680,1527,"anon133","anonfirstname133","anonlastname133",2,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503557,70264,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.0555555555555554,3.111111111111111,3.9444444444444446,4.888888888888889,5.888888888888889,6.944444444444445,8.055555555555555] [score]; prt1: prt1-1-T",1574094303,555073,1,"gradedright",1,1574093430,1531,"anon137","anonfirstname137","anonlastname137",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500034,70210,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1573681175,553413,0,"todo",NA,1573681174,1534,"anon140","anonfirstname140","anonlastname140",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500550,70219,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [-5.044447157118055,-3.666666666666666,-1.4000006781684027,1,3.4000006781684027,6.555555555555555,7.577777438693577,9.08888668484158] [score]; prt1: prt1-1-T",1573824605,553655,1,"gradedright",1,1573823433,1535,"anon141","anonfirstname141","anonlastname141",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501427,70233,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [0.8888888888888888,2.0555555555555554,3.0555555555555554,4.166666666666667,4.944444444444445,6.055555555555555,7,8.166666666666666] [score]; prt1: prt1-1-T",1574114269,554087,1,"gradedright",1,1574113696,1537,"anon143","anonfirstname143","anonlastname143",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502765,70252,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574246252,554696,0,"todo",NA,1573814832,1538,"anon144","anonfirstname144","anonlastname144",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503777,70269,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.8433159722222223,2.933810763888889,4.026909722222222,4.938368055555555,5.815104166666667,6.88671875,7.936197916666667] [score]; prt1: prt1-1-T",1574186385,555211,1,"gradedright",1,1574186330,1776,"anon145","anonfirstname145","anonlastname145",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500829,70223,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.6299997965494792,3.2222222222222223,4.925555759006077,6.592222425672743,8.555555555555555,9.481666564941406,9.81499989827474] [score]; prt1: prt1-1-T",1573943761,553781,1,"gradedright",1,1573931182,1777,"anon146","anonfirstname146","anonlastname146",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501634,70236,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [0.9457465277777777,2.0434027777777777,3.0045572916666665,3.988064236111111,4.952907986111111,6.095920138888889,7.115885416666667,7.946614583333333] [score]; prt1: prt1-1-T",1574173281,554173,1,"gradedright",1,1574163885,1778,"anon147","anonfirstname147","anonlastname147",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502683,70251,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.8888888888888888,2.91111077202691,3.888888888888889,4.82222154405382,5.800001356336805,6.91111077202691,7.888888888888889] [score]; prt1: prt1-1-T",1573945011,554659,1,"gradedright",1,1573807095,1779,"anon148","anonfirstname148","anonlastname148",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503907,70271,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","prt1: #",1574197389,555281,1,"gaveup",NA,1574197389,1409,"anon15","anonfirstname15","anonlastname15",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502591,70250,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.0555555555555554,2.9444444444444446,3.9444444444444446,5.055555555555555,6.166666666666667,7,7.833333333333333] [score]; prt1: prt1-1-T",1573782144,554618,1,"gradedright",1,1573778502,1782,"anon151","anonfirstname151","anonlastname151",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503485,70263,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.7111104329427083,2.5555572509765625,3.488888210720486,4.555555555555555,6.155554877387153,7.3111114501953125,8.599999321831596] [score]; prt1: prt1-1-T",1574106364,555041,1,"gradedright",1,1574090140,1785,"anon154","anonfirstname154","anonlastname154",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500430,70217,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.611111111111111,3.4444444444444446,5,5.666666666666667,6.611111111111111,7.277777777777778,7.888888888888889] [score]; prt1: prt1-1-T",1573820793,553602,1,"gradedright",1,1573819766,1786,"anon155","anonfirstname155","anonlastname155",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500930,70225,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574004034,553842,0,"complete",NA,1574004033,1786,"anon155","anonfirstname155","anonlastname155",2,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503278,70260,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.8333333333333333,2.9444444444444446,3.9444444444444446,4.833333333333333,6,6.944444444444445,7.944444444444445] [score]; prt1: prt1-1-T",1574017885,554946,1,"gradedright",1,1574015856,1787,"anon156","anonfirstname156","anonlastname156",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500759,70222,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.111111111111111,3.0444437662760415,4.111111111111111,5,5.977775573730469,7.044442918565538,7.933333502875434] [score]; prt1: prt1-1-T",1573859310,553750,1,"gradedright",1,1573857223,1789,"anon158","anonfirstname158","anonlastname158",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501111,70228,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.9627787272135417,2.9627787272135415,3.926111009385851,4.962777031792535,5.926111009385851,7.037221272786458,7.962777879503038] [score]; prt1: prt1-1-T",1574017447,553929,1,"gradedright",1,1574015462,1790,"anon159","anonfirstname159","anonlastname159",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501983,70242,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.6945732964409723,2.5875973171657987,4.72093031141493,5.415503607855903,6.655815972222222,7.697674221462673,8.962793138292101] [score]; prt1: prt1-1-T",1574250400,554349,1,"gradedright",1,1574249887,1410,"anon16","anonfirstname16","anonlastname16",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503205,70259,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [-5,-4,-3.0555555555555554,-2.1111111111111107,-1.0555555555555554,-0.16666666666666652,0.8888888888888888,2.111111111111111] [score]; prt1: prt1-1-T",1574100702,554914,1,"gradedright",1,1574019271,1792,"anon161","anonfirstname161","anonlastname161",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500136,70212,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.105565388997396,2.86029052734375,3.941984388563368,5.033083597819011,5.859181722005208,6.9931996663411455,7.799768235948351] [score]; prt1: prt1-1-T",1573749501,553463,1,"gradedright",1,1573749451,1803,"anon172","anonfirstname172","anonlastname172",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501766,70238,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574183813,554235,0,"todo",NA,1574183812,1804,"anon173","anonfirstname173","anonlastname173",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501930,70241,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.022221883138021,2.888888888888889,3.977778116861979,5,6.066664801703559,6.955554538302952,8.022221035427517] [score]; prt1: prt1-1-T",1574234761,554324,1,"gradedright",1,1574234723,1810,"anon179","anonfirstname179","anonlastname179",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503697,70267,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [-0.010101318359375,0.838383992513021,1.8080808851453993,2.5353520711263022,3.3838382297092013,4.191919114854601,5.080808003743489,6.252525329589844] [score]; prt1: prt1-1-T",1574195725,555161,1,"gradedright",1,1574194730,1811,"anon180","anonfirstname180","anonlastname180",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500004,70209,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1573664682,553388,0,"todo",NA,1573664681,1812,"anon181","anonfirstname181","anonlastname181",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501488,70234,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.600001017252604,3.7999996609157987,4.911111619737413,5.888889736599392,6.733331468370226,7.444443596733941,8.155554877387154] [score]; prt1: prt1-1-T",1574125588,554113,1,"gradedright",1,1574124802,1815,"anon184","anonfirstname184","anonlastname184",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500976,70226,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2,2.888888888888889,4,4.944444444444445,5.944444444444445,6.944444444444445,8.11111111111111] [score]; prt1: prt1-1-T",1574009685,553870,1,"gradedright",1,1574008567,1816,"anon185","anonfirstname185","anonlastname185",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503623,70265,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574093773,555111,0,"todo",NA,1574093772,1820,"anon189","anonfirstname189","anonlastname189",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502527,70249,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.9444444444444444,2.9444444444444446,4.055555555555555,4.944444444444445,6.055555555555555,7.055555555555555,8] [score]; prt1: prt1-1-T",1573932171,554589,1,"gradedright",1,1573914878,1824,"anon193","anonfirstname193","anonlastname193",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503654,70266,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574102040,555136,0,"todo",NA,1574102039,1828,"anon197","anonfirstname197","anonlastname197",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502439,70248,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2,3,4,5.111111111111111,6.055555555555555,7.111111111111111,7.944444444444445] [score]; prt1: prt1-1-T",1573922750,554548,1,"gradedright",1,1573921964,1414,"anon20","anonfirstname20","anonlastname20",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500320,70215,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1573817218,553550,0,"todo",NA,1573815227,1835,"anon204","anonfirstname204","anonlastname204",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503856,70270,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574260921,555254,0,"todo",NA,1574192678,1845,"anon214","anonfirstname214","anonlastname214",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501280,70230,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.3333333333333333,2.1666666666666665,3,3.2777777777777777,4.111111111111111,6,7.222222222222222] [score]; prt1: prt1-1-T",1574049350,554005,1,"gradedright",1,1574048654,1849,"anon218","anonfirstname218","anonlastname218",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502287,70246,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.111111111111111,3,3.9444444444444446,5.055555555555555,5.944444444444445,7,8.055555555555555] [score]; prt1: prt1-1-T",1573686223,554481,1,"gradedright",1,1573684463,1850,"anon219","anonfirstname219","anonlastname219",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501546,70235,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.0833333333333335,3.0555555555555554,3.9444444444444446,4.944444444444445,5.888888888888889,7.027777777777778,8.027777777777779] [score]; prt1: prt1-1-T",1574159148,554138,1,"gradedright",1,1574157819,1852,"anon221","anonfirstname221","anonlastname221",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503148,70258,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [0.7222222222222223,1,1,1,1,1,1,1] [score]; prt1: ATSet_wrongsz. | prt1-1-F",1574173072,554888,1,"gradedwrong",0,1574023412,1854,"anon223","anonfirstname223","anonlastname223",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501196,70229,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.9244791666666667,3.068576388888889,3.880642361111111,4.987847222222222,6.014973958333333,6.972439236111111,7.992404513888889] [score]; prt1: prt1-1-T",1574099840,553967,1,"gradedright",1,1574092932,1855,"anon224","anonfirstname224","anonlastname224",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503349,70261,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.7777777777777777,3.4444444444444446,3.814814249674479,4.296296861436632,5.222222222222222,6.92592536078559,9.629629347059462] [score]; prt1: prt1-1-T",1574030700,554979,1,"gradedright",1,1574027432,1420,"anon26","anonfirstname26","anonlastname26",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500621,70220,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [-3.8888905843098964,-2.5555555555555554,-1.4814809163411455,-0.18518575032552098,1,2.1481492784288196,2.7407413058810763,3.814814249674479] [score]; prt1: prt1-1-T",1573927560,553687,1,"gradedright",1,1573925837,1434,"anon40","anonfirstname40","anonlastname40",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502129,70244,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [0.0123443603515625,1.6172841389973958,2.8518507215711804,4.086418999565972,5.13580322265625,6.1851857503255205,7.0493825276692705,8.222222222222221] [score]; prt1: prt1-1-T",1573995110,554413,1,"gradedright",1,1573994582,1444,"anon50","anonfirstname50","anonlastname50",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500248,70214,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.8888888888888888,2.7777777777777777,3.844445970323351,4.866665310329861,5.933335198296441,6.733334859212239,8.066666497124565] [score]; prt1: prt1-1-T",1573776933,553514,1,"gradedright",1,1573775852,1445,"anon51","anonfirstname51","anonlastname51",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503412,70262,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [0.2133331298828125,1,1.5411122639973957,2.2288886176215277,3.212777031792535,3.8516676161024303,4.687777201334636,5.080556233723958] [score]; prt1: prt1-1-T",1574081020,555008,1,"gradedright",1,1574075318,1447,"anon53","anonfirstname53","anonlastname53",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501802,70239,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,3,4.333333333333333,5.444444444444445,6.333333333333333,7.666666666666667,8.444444444444444,9.5] [score]; prt1: prt1-1-T",1574191511,554260,1,"gradedright",1,1574191479,1448,"anon54","anonfirstname54","anonlastname54",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503737,70268,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","",1574183051,555186,0,"todo",NA,1574183050,1400,"anon6","anonfirstname6","anonlastname6",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500495,70218,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.7816840277777777,4.474392361111111,6.056857638888889,7.868923611111111,8.495008680555555,9.14236111111111,9.601128472222221] [score]; prt1: prt1-1-T",1573821290,553630,1,"gradedright",1,1573820657,1454,"anon60","anonfirstname60","anonlastname60",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500083,70211,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.8888888888888888,3,3.8333333333333335,5,6.055555555555555,6.944444444444445,8.055555555555555] [score]; prt1: prt1-1-T",1573750101,553438,1,"gradedright",1,1573749686,1460,"anon66","anonfirstname66","anonlastname66",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503012,70256,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2,2.9444444444444446,4.055555555555555,5.166666666666667,6,6.833333333333333,8.11111111111111] [score]; prt1: prt1-1-T",1573919365,554826,1,"gradedright",1,1573918349,1463,"anon69","anonfirstname69","anonlastname69",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1503071,70257,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,2.0555555555555554,3.2222222222222223,4.333333333333333,5.055555555555555,5.666666666666667,6.055555555555555,6.555555555555555] [score]; prt1: prt1-1-T",1573931181,554853,1,"gradedright",1,1573930722,1465,"anon71","anonfirstname71","anonlastname71",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1500191,70213,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [-4.944444444444445,-4,-2.8888888888888893,-1.7777777777777777,-0.8333333333333335,0.16666666666666674,1,1.8888888888888888] [score]; prt1: prt1-1-T",1573867345,553489,1,"gradedright",1,1573859744,1478,"anon84","anonfirstname84","anonlastname84",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501716,70237,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1,1.451171875,1,1,1,1,1] [score]; prt1: ATSet_wrongsz. | prt1-1-F",1574186538,554209,2,"gradedwrong",0,1574186538,1480,"anon86","anonfirstname86","anonlastname86",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1501053,70227,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [0.8220486111111112,2.0454559326171875,3.06864251030816,4.28090074327257,4.91822984483507,6.151582505967882,7.131018744574653,7.940153333875868] [score]; prt1: prt1-1-T",1574010476,553903,1,"gradedright",1,1574009831,1481,"anon87","anonfirstname87","anonlastname87",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502375,70247,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.3333333333333333,2.0555555555555554,2.8333333333333335,4.333333333333333,5.611111111111111,7,8.333333333333334] [score]; prt1: prt1-1-T",1573735350,554520,1,"gradedright",1,1573734826,1403,"anon9","anonfirstname9","anonlastname9",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502225,70245,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.9382714165581598,3.07407463921441,4.753089057074653,5.641976250542535,6.629630194769965,7.765430026584202,8.358024597167969] [score]; prt1: prt1-1-T",1573675438,554454,1,"gradedright",1,1573674810,1486,"anon92","anonfirstname92","anonlastname92",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd1",1502810,70253,14,"interactivecountback",23601,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of an increasing sequence.

[[input:da_ans1]] [[validation:da_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_da_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_da_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_da_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","da_ans1: [1,2,3,4,5,6,7,8] [score]; prt1: prt1-1-T","da_ans1: [1,1.8888888888888888,3.0444454616970487,4.022223578559028,5.044443766276042,6.022218492296007,7.044443766276042,8.022221883138021] [score]; prt1: prt1-1-T",1573853725,554721,1,"gradedright",1,1573848841,1489,"anon95","anonfirstname95","anonlastname95",1,"LGE Group GCG"
