"csv_file_name","question_name","id","questionusageid","slot","behaviour","questionid","variant","maxmark","minfraction","maxfraction","flagged","questionsummary","rightanswer","responsesummary","timemodified","questionattemptid","sequencenumber","state","fraction","timecreated","userid","username","firstname","lastname","attempt_number","group"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501876,70240,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-2.484444512261285,2.777776930067274,-2.271109686957465,2.5999993218315973,-1.6311119927300348,1,-1.9866672092013888] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574204425,554296,1,"gradedright",1,1574203661,1494,"anon100","anonfirstname100","anonlastname100",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500690,70221,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-1,1,-1.0888892279730902,1,-1.044443766276042,1,-1.044443766276042] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573848942,553719,1,"gradedright",1,1573847995,1495,"anon101","anonfirstname101","anonlastname101",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502053,70243,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1.9444444444444444,1,2.0277777777777777,1,1.9444444444444444,1,1.9722222222222223] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573646936,554379,2,"gradedright",1,1573645936,1498,"anon104","anonfirstname104","anonlastname104",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500379,70216,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [2.0833333333333335,3.9444444444444446,2.0277777777777777,4.027777777777778,1.9444444444444444,3.9444444444444446,1.9722222222222223,3.9444444444444446] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573938882,553579,1,"gradedright",1,1573938303,1503,"anon109","anonfirstname109","anonlastname109",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501331,70231,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574263388,554033,0,"todo",NA,1574101584,1508,"anon114","anonfirstname114","anonlastname114",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503947,70272,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574226482,555309,0,"todo",NA,1574226481,1512,"anon118","anonfirstname118","anonlastname118",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501374,70232,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574105914,554059,0,"todo",NA,1574105913,1517,"anon123","anonfirstname123","anonlastname123",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500896,70224,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1573942244,553815,0,"todo",NA,1573942243,1521,"anon127","anonfirstname127","anonlastname127",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502961,70255,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1.0888875325520833,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573921825,554800,2,"gradedright",1,1573921822,1525,"anon131","anonfirstname131","anonlastname131",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502898,70254,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574249689,554770,0,"todo",NA,1573903962,1527,"anon133","anonfirstname133","anonlastname133",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503562,70264,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [0.8888888888888888,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574094303,555075,2,"gradedright",1,1574093461,1531,"anon137","anonfirstname137","anonlastname137",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500036,70210,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1573681175,553415,0,"todo",NA,1573681174,1534,"anon140","anonfirstname140","anonlastname140",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500556,70219,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573824605,553657,3,"gradedright",1,1573823471,1535,"anon141","anonfirstname141","anonlastname141",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501433,70233,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574114269,554089,3,"gradedright",1,1574113745,1537,"anon143","anonfirstname143","anonlastname143",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502767,70252,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574246252,554698,0,"todo",NA,1573814832,1538,"anon144","anonfirstname144","anonlastname144",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503782,70269,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [0.02365451388888884,0.04253472222222232,0.010199652777777679,0.014105902777777679,0.07942708333333326,0.07443576388888884,0.05360243055555558,0.01627604166666674] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574186385,555213,2,"gradedright",1,1574186381,1776,"anon145","anonfirstname145","anonlastname145",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500834,70223,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [0.7777777777777777,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573943761,553783,2,"gradedright",1,1573931220,1777,"anon146","anonfirstname146","anonlastname146",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501638,70236,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-0.7608506944444446,1,-0.8522135416666665,1.0212673611111112,-0.9377170138888888,1.1514756944444444,-0.8118489583333335] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574173281,554175,1,"gradedright",1,1574163961,1778,"anon147","anonfirstname147","anonlastname147",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502687,70251,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-1,1,-1.1333329942491321,1,-1.1333329942491321,1,-1.0888892279730902] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573945011,554661,1,"gradedright",1,1573807134,1779,"anon148","anonfirstname148","anonlastname148",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503911,70271,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","prt1: #",1574197389,555283,1,"gaveup",NA,1574197389,1409,"anon15","anonfirstname15","anonlastname15",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502597,70250,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573782144,554620,3,"gradedright",1,1573778540,1782,"anon151","anonfirstname151","anonlastname151",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503491,70263,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,1,1,1,1,1.0444429185655382] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574106364,555043,3,"gradedright",1,1574090187,1785,"anon154","anonfirstname154","anonlastname154",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500436,70217,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1.9444444444444444,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573820793,553604,3,"gradedright",1,1573819793,1786,"anon155","anonfirstname155","anonlastname155",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500932,70225,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574004034,553844,0,"complete",NA,1574004034,1786,"anon155","anonfirstname155","anonlastname155",2,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503282,70260,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-1,1.0555555555555556,-0.8888888888888888,1,-0.9444444444444446,1,-0.9444444444444446] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574017885,554948,1,"gradedright",1,1574015915,1787,"anon156","anonfirstname156","anonlastname156",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500763,70222,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,0.9111107720269098,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573859310,553752,1,"gradedright",1,1573857271,1789,"anon158","anonfirstname158","anonlastname158",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501117,70228,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-0.07388983832465268,1,-0.07444424099392366,1,0,1,-0.0366668701171875] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574017447,553931,3,"gradedright",1,1574015553,1790,"anon159","anonfirstname159","anonlastname159",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501988,70242,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1.7689921061197917,0.23100789388020826,1.0744188096788194,1.9178297254774306,1,-0.24031236436631964,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574250400,554351,2,"gradedright",1,1574249923,1410,"anon16","anonfirstname16","anonlastname16",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503209,70259,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,0.05555555555555558,1,-0.05555555555555536,1,-0.05555555555555536,1,0.11111111111111116] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574100702,554916,1,"gradedright",1,1574019303,1792,"anon161","anonfirstname161","anonlastname161",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500140,70212,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [0.02922566731770826,1,-1.1178131103515625,1,-1.0633188883463545,1.0176018608940973,-1.2617679172092013,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573749501,553465,1,"gradedright",1,1573749496,1803,"anon172","anonfirstname172","anonlastname172",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501768,70238,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574183813,554237,0,"todo",NA,1574183812,1804,"anon173","anonfirstname173","anonlastname173",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501934,70241,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1.8888888888888888,1,1.9777764214409723,1,2,1,1.933335198296441,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574234761,554326,2,"gradedright",1,1574234756,1810,"anon179","anonfirstname179","anonlastname179",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503701,70267,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [6.656565348307292,4.393938700358073,5.929292466905382,3.02020263671875,7.545455084906684,2.858586629231771,5.848484463161892,4.919193691677517] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574195725,555163,1,"gradedright",1,1574194842,1811,"anon180","anonfirstname180","anonlastname180",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500006,70209,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1573664682,553390,0,"todo",NA,1573664681,1812,"anon181","anonfirstname181","anonlastname181",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501493,70234,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1.8444434271918402,1,3.1777767605251737,-0.733332316080729,4.822223239474827,-1,3.355556911892361,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574125588,554115,2,"gradedright",1,1574124868,1815,"anon184","anonfirstname184","anonlastname184",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500982,70226,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574009685,553872,3,"gradedright",1,1574008671,1816,"anon185","anonfirstname185","anonlastname185",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503625,70265,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574093773,555113,0,"todo",NA,1574093772,1820,"anon189","anonfirstname189","anonlastname189",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502531,70249,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-2.6111111111111107,1,-3.333333333333334,1,-2.7777777777777777,1,-2.2222222222222223] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573932171,554591,1,"gradedright",1,1573914948,1824,"anon193","anonfirstname193","anonlastname193",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503656,70266,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574102040,555138,0,"todo",NA,1574102039,1828,"anon197","anonfirstname197","anonlastname197",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502443,70248,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-0.22222222222222232,2.9444444444444446,-1.8888888888888888,5.055555555555555,-3.166666666666666,2,-2.4444444444444446] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573922750,554550,1,"gradedright",1,1573922021,1414,"anon20","anonfirstname20","anonlastname20",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500322,70215,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1573817218,553552,0,"todo",NA,1573815227,1835,"anon204","anonfirstname204","anonlastname204",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503859,70270,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574260921,555256,1,"todo",NA,1574260920,1845,"anon214","anonfirstname214","anonlastname214",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501286,70230,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1.6666666666666667,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574049350,554007,3,"gradedright",1,1574048677,1849,"anon218","anonfirstname218","anonlastname218",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502291,70246,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,2,1,2.111111111111111,1,2.111111111111111,1,2.1666666666666665] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573686223,554483,1,"gradedright",1,1573684498,1850,"anon219","anonfirstname219","anonlastname219",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501551,70235,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-0.9166666666666665,1,-1.166666666666667,1,-0.9166666666666665,0.8333333333333335,-1.1388888888888888] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574159148,554140,1,"gradedright",1,1574157910,1852,"anon221","anonfirstname221","anonlastname221",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503153,70258,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [2.7777777777777777,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574173072,554890,1,"gradedright",1,1574023544,1854,"anon223","anonfirstname223","anonlastname223",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501201,70229,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [2.874782986111111,1,2.814670138888889,1,2.9251302083333335,1,2.962673611111111,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574099840,553969,2,"gradedright",1,1574093152,1855,"anon224","anonfirstname224","anonlastname224",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503353,70261,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,2.518519083658854,-2.592592027452257,4.777777777777778,-4.925927056206597,6.222222222222222,-6.962963528103298,8.185184054904514] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574030700,554981,1,"gradedright",1,1574027487,1420,"anon26","anonfirstname26","anonlastname26",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500625,70220,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-1,1,2.7777777777777777,1,-1.629628499348958,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573927560,553689,1,"gradedright",1,1573925882,1434,"anon40","anonfirstname40","anonlastname40",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502135,70244,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573995110,554415,3,"gradedright",1,1573994615,1444,"anon50","anonfirstname50","anonlastname50",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500252,70214,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [-3.75555419921875,1.9333326551649306,-3.0000033908420143,2.377773708767361,-3.0888841417100696,1.9333411322699652,-1.4444444444444446,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573776933,553516,1,"gradedright",1,1573775920,1445,"anon51","anonfirstname51","anonlastname51",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503418,70262,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [-0.03277757432725714,-0.22888946533203125,-0.03222232394748259,0.01666683620876741,-0.13111114501953125,-0.18000115288628482,-0.08166758219401027,0.11500040690104174] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574081020,555010,3,"gradedright",1,1574075383,1447,"anon53","anonfirstname53","anonlastname53",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501806,70239,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-1.333333333333333,3.4444444444444446,-0.7222222222222223,2.611111111111111,-5.833333333333333,1.1111111111111111,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574191511,554262,1,"gradedright",1,1574191507,1448,"anon54","anonfirstname54","anonlastname54",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503739,70268,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","",1574183051,555188,0,"todo",NA,1574183050,1400,"anon6","anonfirstname6","anonlastname6",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500499,70218,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [-1.872395833333333,2.9344618055555554,-1.8726128472222223,3.040798611111111,-1.979817708333333,3.084201388888889,-1.9997829861111112,3.03125] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573821290,553632,1,"gradedright",1,1573820710,1454,"anon60","anonfirstname60","anonlastname60",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500087,70211,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1.9444444444444444,1,1.9444444444444444,1.1111111111111112,1.9444444444444444,1,2.0555555555555554] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573750101,553440,1,"gradedright",1,1573749740,1460,"anon66","anonfirstname66","anonlastname66",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503016,70256,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,6,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573919365,554828,1,"gradedright",1,1573918397,1463,"anon69","anonfirstname69","anonlastname69",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1503078,70257,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,1,1,1,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573931181,554855,4,"gradedright",1,1573930760,1465,"anon71","anonfirstname71","anonlastname71",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1500197,70213,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [5.111111111111111,5.166666666666667,5.111111111111111,5.111111111111111,4.833333333333333,4.833333333333333,5.055555555555555,5] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573867345,553491,2,"gradedright",1,1573859812,1478,"anon84","anonfirstname84","anonlastname84",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501720,70237,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","prt1: #",1574186538,554211,1,"gaveup",NA,1574186538,1480,"anon86","anonfirstname86","anonlastname86",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1501057,70227,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-0.8128390842013888,1,-1.1131303575303821,1,-0.9351738823784723,1,-1.3355560302734375] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1574010476,553905,1,"gradedright",1,1574009894,1481,"anon87","anonfirstname87","anonlastname87",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502379,70247,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,-0.7222222222222223,1,-1,1,-1.0555555555555554,1,-1.0555555555555554] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573735350,554522,1,"gradedright",1,1573734866,1403,"anon9","anonfirstname9","anonlastname9",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502231,70245,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,1,-0.23456827799479152,1,2.5802476671006946,1,1,1] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573675438,554456,3,"gradedright",1,1573674845,1486,"anon92","anonfirstname92","anonlastname92",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd3",1502814,70253,16,"interactivecountback",23606,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a sequence which is neither increasing nor decreasing.

[[input:dc_ans1]] [[validation:dc_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_dc_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_dc_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_dc_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","dc_ans1: [2,4,2,4,2,4,2,4] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T","dc_ans1: [1,2.0666673448350696,1,2.111111111111111,1,2.2000003390842013,1,2.1555548773871527] [score]; prt1: ATLogic_True | prt1-1-T | ATLogic_True | prt1-2-T",1573853725,554723,1,"gradedright",1,1573848907,1489,"anon95","anonfirstname95","anonlastname95",1,"LGE Group GCG"
