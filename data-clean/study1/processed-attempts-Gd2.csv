"csv_file_name","question_name","id","questionusageid","slot","behaviour","questionid","variant","maxmark","minfraction","maxfraction","flagged","questionsummary","rightanswer","responsesummary","timemodified","questionattemptid","sequencenumber","state","fraction","timecreated","userid","username","firstname","lastname","attempt_number","group"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501874,70240,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","prt1: #",1574204425,554295,1,"gaveup",NA,1574204425,1494,"anon100","anonfirstname100","anonlastname100",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500688,70221,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.02222188313802076,-1.0888892279730902,-1.9777781168619795,-2.955554538302952,-4.15555657280816,-5.08888922797309,-5.888888888888889] [score]; prt1: prt1-1-T",1573848942,553718,1,"gradedright",1,1573847977,1495,"anon101","anonfirstname101","anonlastname101",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502050,70243,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.02777777777777768,-0.8888888888888888,-1.9722222222222223,-2.8888888888888893,-4,-4.916666666666667,-6] [score]; prt1: prt1-1-T",1573646936,554378,1,"gradedright",1,1573645910,1498,"anon104","anonfirstname104","anonlastname104",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500377,70216,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [-1.1111111111111112,-2,-2.916666666666666,-4,-5.083333333333333,-6.055555555555555,-7.055555555555555,-8.027777777777779] [score]; prt1: prt1-1-T",1573938882,553578,1,"gradedright",1,1573938266,1503,"anon109","anonfirstname109","anonlastname109",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501330,70231,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574263388,554032,0,"todo",NA,1574101584,1508,"anon114","anonfirstname114","anonlastname114",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503946,70272,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574226482,555308,0,"todo",NA,1574226481,1512,"anon118","anonfirstname118","anonlastname118",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501373,70232,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574105914,554058,0,"todo",NA,1574105913,1517,"anon123","anonfirstname123","anonlastname123",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500895,70224,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1573942244,553814,0,"todo",NA,1573942243,1521,"anon127","anonfirstname127","anonlastname127",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502958,70255,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [-1.1777784559461804,-1.8444434271918402,-3,-3.9333326551649304,-5.0888926188151045,-6.06666734483507,-7.044443766276043,-7.97777811686198] [score]; prt1: prt1-1-T",1573921825,554799,1,"gradedright",1,1573921806,1525,"anon131","anonfirstname131","anonlastname131",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502897,70254,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574249689,554769,0,"todo",NA,1573903962,1527,"anon133","anonfirstname133","anonlastname133",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503559,70264,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.11111111111111116,-0.8333333333333335,-1.9444444444444446,-3.2222222222222223,-4.277777777777778,-5,-6.166666666666668] [score]; prt1: prt1-1-T",1574094303,555074,1,"gradedright",1,1574093444,1531,"anon137","anonfirstname137","anonlastname137",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500035,70210,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1573681175,553414,0,"todo",NA,1573681174,1534,"anon140","anonfirstname140","anonlastname140",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500552,70219,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [9.088889227973091,5.93333265516493,3.7111104329427085,1,-2.6000010172526036,-4.422222561306423,-7.044445461697048,-8.955554538302952] [score]; prt1: prt1-1-T",1573824605,553656,1,"gradedright",1,1573823453,1535,"anon141","anonfirstname141","anonlastname141",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501429,70233,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.05555555555555536,-1.166666666666667,-1.8888888888888888,-3,-4,-5,-5.888888888888889] [score]; prt1: prt1-1-T",1574114269,554088,1,"gradedright",1,1574113724,1537,"anon143","anonfirstname143","anonlastname143",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502766,70252,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574246252,554697,0,"todo",NA,1573814832,1538,"anon144","anonfirstname144","anonlastname144",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503779,70269,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.03168402777777768,-1.6905381944444446,-2.720703125,-4.169704861111111,-6.034288194444445,-6.906467013888889,-7.984592013888889] [score]; prt1: prt1-1-T",1574186385,555212,1,"gradedright",1,1574186344,1776,"anon145","anonfirstname145","anonlastname145",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500831,70223,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.22222222222222232,-0.4816674126519098,-1.296112060546875,-1.6666649712456598,-2.7777777777777777,-4.518334282769097,-9.074444240993923] [score]; prt1: prt1-1-T",1573943761,553782,1,"gradedright",1,1573931199,1777,"anon146","anonfirstname146","anonlastname146",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501636,70236,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.09613715277777768,-0.7769097222222223,-1.9644097222222223,-2.919921875,-3.82421875,-5.055338541666667,-5.948784722222222] [score]; prt1: prt1-1-T",1574173281,554174,1,"gradedright",1,1574163919,1778,"anon147","anonfirstname147","anonlastname147",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502685,70251,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.06666734483506942,-1,-2.0666673448350696,-3,-3.9333343505859375,-4.91111077202691,-6.111114501953125] [score]; prt1: prt1-1-T",1573945011,554660,1,"gradedright",1,1573807117,1779,"anon148","anonfirstname148","anonlastname148",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503909,70271,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","prt1: #",1574197389,555282,1,"gaveup",NA,1574197389,1409,"anon15","anonfirstname15","anonlastname15",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502593,70250,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.16666666666666674,-1.166666666666667,-2.333333333333334,-3,-3.8888888888888893,-6.055555555555555,-6.666666666666668] [score]; prt1: prt1-1-T",1573782144,554619,1,"gradedright",1,1573778526,1782,"anon151","anonfirstname151","anonlastname151",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503487,70263,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.022218492296007142,-1.1333329942491321,-2.422220865885416,-3.488889906141493,-4.6888885498046875,-6.0666656494140625,-9.577777438693577] [score]; prt1: prt1-1-T",1574106364,555042,1,"gradedright",1,1574090168,1785,"anon154","anonfirstname154","anonlastname154",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500432,70217,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.8888888888888888,-3.5555555555555554,-7.055555555555555,-7.555555555555555,-8.222222222222221,-8.88888888888889,-9.5] [score]; prt1: prt1-1-T",1573820793,553603,1,"gradedright",1,1573819780,1786,"anon155","anonfirstname155","anonlastname155",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500931,70225,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574004034,553843,0,"complete",NA,1574004034,1786,"anon155","anonfirstname155","anonlastname155",2,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503280,70260,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.05555555555555536,-1.1111111111111112,-2,-2.8888888888888893,-4,-5,-6] [score]; prt1: prt1-1-T",1574017885,554947,1,"gradedright",1,1574015885,1787,"anon156","anonfirstname156","anonlastname156",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500761,70222,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [0.06666734483506942,-0.9555562337239585,-2.0222218831380214,-3.044445461697048,-4.06666734483507,-4.91111077202691,-5.888888888888889,-7] [score]; prt1: prt1-1-T",1573859310,553751,1,"gradedright",1,1573857255,1789,"anon158","anonfirstname158","anonlastname158",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501113,70228,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.11111111111111116,-1.073888990614149,-2.036666022406684,-3.0372221204969616,-4,-4.926111009385851,-6.073888990614149] [score]; prt1: prt1-1-T",1574017447,553930,1,"gradedright",1,1574015515,1790,"anon159","anonfirstname159","anonlastname159",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501985,70242,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [8.218607584635416,5.986043294270833,4.026358710394965,1.9426337348090277,0.18139478895399308,-1.703877766927083,-3.9612375895182286,-5.920932345920139] [score]; prt1: prt1-1-T",1574250400,554350,1,"gradedright",1,1574249905,1410,"anon16","anonfirstname16","anonlastname16",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503207,70259,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [2.1666666666666665,1,0.11111111111111116,-1.0555555555555554,-1.8888888888888888,-3.166666666666666,-3.9444444444444446,-5.111111111111111] [score]; prt1: prt1-1-T",1574100702,554915,1,"gradedright",1,1574019287,1792,"anon161","anonfirstname161","anonlastname161",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500138,70212,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [0.04562038845486116,-1.1026238335503473,-1.9846649169921875,-2.933978610568577,-3.9558749728732643,-5.1487274169921875,-5.952402750651042,-7.10064697265625] [score]; prt1: prt1-1-T",1573749501,553464,1,"gradedright",1,1573749481,1803,"anon172","anonfirstname172","anonlastname172",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501767,70238,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574183813,554236,0,"todo",NA,1574183812,1804,"anon173","anonfirstname173","anonlastname173",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501931,70241,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574234761,554325,0,"todo",NA,1574233868,1810,"anon179","anonfirstname179","anonlastname179",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503699,70267,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [9.121211581759983,8.151515536838108,6.939392937554254,5.606058756510417,4.636364407009548,3.6666666666666665,2.898990207248264,1] [score]; prt1: prt1-1-T",1574195725,555162,1,"gradedright",1,1574194766,1811,"anon180","anonfirstname180","anonlastname180",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500005,70209,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1573664682,553389,0,"todo",NA,1573664681,1812,"anon181","anonfirstname181","anonlastname181",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501490,70234,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-1.3555552164713545,-2.333333333333334,-3.3555569118923607,-4.244444105360243,-4.688891940646702,-5.75555419921875,-6.911110772026909] [score]; prt1: prt1-1-T",1574125588,554114,1,"gradedright",1,1574124821,1815,"anon184","anonfirstname184","anonlastname184",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500978,70226,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.05555555555555536,-0.9444444444444446,-2.1111111111111107,-3,-4.055555555555555,-4.888888888888889,-6.055555555555555] [score]; prt1: prt1-1-T",1574009685,553871,1,"gradedright",1,1574008600,1816,"anon185","anonfirstname185","anonlastname185",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503624,70265,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574093773,555112,0,"todo",NA,1574093772,1820,"anon189","anonfirstname189","anonlastname189",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502529,70249,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [-0.38888888888888884,-1,-2.6111111111111107,-4.111111111111111,-5.833333333333333,-7.333333333333332,-7.944444444444445,-8.88888888888889] [score]; prt1: prt1-1-T",1573932171,554590,1,"gradedright",1,1573914913,1824,"anon193","anonfirstname193","anonlastname193",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503655,70266,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574102040,555137,0,"todo",NA,1574102039,1828,"anon197","anonfirstname197","anonlastname197",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502441,70248,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [-0.8888888888888888,-1.8888888888888888,-2.9444444444444446,-3.8888888888888893,-5,-6,-7.055555555555555,-8.277777777777779] [score]; prt1: prt1-1-T",1573922750,554549,1,"gradedright",1,1573921998,1414,"anon20","anonfirstname20","anonlastname20",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500321,70215,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1573817218,553551,0,"todo",NA,1573815227,1835,"anon204","anonfirstname204","anonlastname204",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503857,70270,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574260921,555255,0,"todo",NA,1574192678,1845,"anon214","anonfirstname214","anonlastname214",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501282,70230,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","prt1: #",1574049350,554006,1,"gaveup",NA,1574049350,1849,"anon218","anonfirstname218","anonlastname218",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502289,70246,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.11111111111111116,-1,-2,-2.9444444444444446,-4.055555555555555,-4.888888888888889,-6] [score]; prt1: prt1-1-T",1573686223,554482,1,"gradedright",1,1573684484,1850,"anon219","anonfirstname219","anonlastname219",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501549,70235,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.05555555555555558,-0.9444444444444446,-2.083333333333334,-3.1388888888888893,-3.8888888888888893,-5,-6.138888888888889] [score]; prt1: prt1-1-T",1574159148,554139,2,"gradedright",1,1574157867,1852,"anon221","anonfirstname221","anonlastname221",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503151,70258,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1.6111111111111112,1,0.6111111111111112,-2.0555555555555554,-4,-6.777777777777779,-8.555555555555555,-9.833333333333334] [score]; prt1: prt1-1-T",1574173072,554889,2,"gradedright",1,1574023534,1854,"anon223","anonfirstname223","anonlastname223",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501198,70229,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [7.869791666666667,6.963324652777778,5.939019097222222,4.908420138888889,3.833767361111111,3.0477430555555554,1.8285590277777777,1] [score]; prt1: prt1-1-T",1574099840,553968,1,"gradedright",1,1574093125,1855,"anon224","anonfirstname224","anonlastname224",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503351,70261,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-6.444444444444445,-7.629630194769966,-8.592592027452257,-9.037036471896702,-9.185184054904514,-9.370371500651041,-9.555555555555555] [score]; prt1: prt1-1-T",1574030700,554980,1,"gradedright",1,1574027460,1420,"anon26","anonfirstname26","anonlastname26",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500623,70220,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [8.185185750325521,6.111111111111111,4.444444444444445,3.4444444444444446,2.2592586941189237,1,-0.481480916341146,-1.0370364718967013] [score]; prt1: prt1-1-T",1573927560,553688,1,"gradedright",1,1573925869,1434,"anon40","anonfirstname40","anonlastname40",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502131,70244,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.32098727756076384,-0.8518507215711804,-2.1481492784288196,-2.827158610026041,-3.9382697211371527,-4.864200168185764,-6.592593722873264] [score]; prt1: prt1-1-T",1573995110,554414,1,"gradedright",1,1573994601,1444,"anon50","anonfirstname50","anonlastname50",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500250,70214,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [-1.1333329942491321,-2.244444105360243,-2.91111077202691,-4.111111111111111,-5.08888922797309,-6.155554877387154,-7,-7.888888888888889] [score]; prt1: prt1-1-T",1573776933,553515,1,"gradedright",1,1573775882,1445,"anon51","anonfirstname51","anonlastname51",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503414,70262,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [5.818333095974392,4.83499993218316,3.901112026638455,2.9666680230034723,1.6883324517144098,1,0.11500040690104174,-0.9666663275824652] [score]; prt1: prt1-1-T",1574081020,555009,1,"gradedright",1,1574075347,1447,"anon53","anonfirstname53","anonlastname53",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501804,70239,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-1.7222222222222223,-4.111111111111111,-5.277777777777778,-6.666666666666668,-7.777777777777779,-8.833333333333334,-10.055555555555555] [score]; prt1: prt1-1-T",1574191511,554261,1,"gradedright",1,1574191494,1448,"anon54","anonfirstname54","anonlastname54",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503738,70268,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","",1574183051,555187,0,"todo",NA,1574183050,1400,"anon6","anonfirstname6","anonlastname6",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500497,70218,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.42838541666666674,-0.21440972222222232,-1.0034722222222223,-1.5477430555555554,-2.2777777777777777,-2.9437934027777777,-3.6078559027777777] [score]; prt1: prt1-1-T",1573821290,553631,1,"gradedright",1,1573820676,1454,"anon60","anonfirstname60","anonlastname60",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500085,70211,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.11111111111111116,-0.7777777777777777,-1.7777777777777777,-3.0555555555555554,-3.833333333333334,-5.055555555555555,-6.111111111111111] [score]; prt1: prt1-1-T",1573750101,553439,1,"gradedright",1,1573749711,1460,"anon66","anonfirstname66","anonlastname66",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503014,70256,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.05555555555555558,-1.2777777777777777,-2.7777777777777777,-4.388888888888889,-5.5,-7.333333333333332,-9.333333333333334] [score]; prt1: prt1-1-T",1573919365,554827,1,"gradedright",1,1573918377,1463,"anon69","anonfirstname69","anonlastname69",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1503073,70257,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [7.777777777777778,5.888888888888889,3.8333333333333335,1,-1.2777777777777777,-3.833333333333334,-6.666666666666668,-8.5] [score]; prt1: prt1-1-T",1573931181,554854,1,"gradedright",1,1573930742,1465,"anon71","anonfirstname71","anonlastname71",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1500194,70213,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [6.055555555555555,4.888888888888889,3.9444444444444446,3.2222222222222223,2,1,0.11111111111111116,-0.8888888888888888] [score]; prt1: prt1-1-T",1573867345,553490,2,"gradedright",1,1573867345,1478,"anon84","anonfirstname84","anonlastname84",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501718,70237,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","prt1: #",1574186538,554210,1,"gaveup",NA,1574186538,1480,"anon86","anonfirstname86","anonlastname86",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1501055,70227,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [-1.0464155409071179,-1.936167399088542,-2.9928232828776036,-4.316182454427083,-5.065295749240452,-5.979693942599827,-6.778628879123264,-8.0267333984375] [score]; prt1: prt1-1-T",1574010476,553904,1,"gradedright",1,1574009868,1481,"anon87","anonfirstname87","anonlastname87",1,"LGE Group GGC"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502377,70247,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [8.055555555555555,6.222222222222222,4.944444444444445,3.611111111111111,1.9444444444444444,0.5,-1.166666666666667,-4.055555555555555] [score]; prt1: prt1-1-T",1573735350,554521,1,"gradedright",1,1573734844,1403,"anon9","anonfirstname9","anonlastname9",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502227,70245,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,0.3086412217881944,-0.08641899956597232,-1.4197523328993054,-3.098765055338541,-4.28395250108507,-5.370369805230035,-6.012347751193577] [score]; prt1: prt1-1-T",1573675438,554455,1,"gradedright",1,1573674832,1486,"anon92","anonfirstname92","anonlastname92",1,"LGE Group GCG"
"../data-raw/study1/attempts-Quiz1.csv","Gd2",1502812,70253,15,"interactivecountback",23605,1,1,0,1,0,"Drag the points \(u_1,\ldots, u_8\) so that they show the first 8 terms of a decreasing sequence.

[[input:db_ans1]] [[validation:db_ans1]]
[[jsxgraph width='360px' height='360px']] // The values from the question text are saved in variable vars. // These are needed only if you want to ""randomize"" the diagram. // The random-values should be saved in a maxima-list and printed in a paragraph with the class ""stack-variables"". // Use the syntax {#list1#} to print the list as plain text. // You can use the attribute style=""display:none;"" to hide the list from students. // // Example:
{#list1#}
// var vars = []; // The answers from the answer-field are saved here. This is neede to save the 'state' of the diagram. var ans = []; // Shortcut for accessing the document. // var doc = window.parent.document; // For ILIAS var doc = document; // For Moodle /************************************************************************************************/ /* ONLY EDIT THE CODE BETWEEN THESE TWO STAR-LINES */ // Create the board and all elements // use vars[0], vars[1], etc. for accessing the values read from the question text. // // If you want to test the applet offline, you need to uncomment the next line. // var divid = ""box""; JXG.Options.axis.ticks.minorTicks = 0; var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1,10,9,-10], axis: true, grid: true, showNavigation: false, showCopyright:false}); // The function createWithTimeout should include the elements that depend on values read from the question text. // These elements are created with a slight delay, so that the page has time to load. // Use vars[0], vars[1], etc. for accessing the values read from the question text. var createWithTimeout = function() { // none needed }; var answer = []; var vline = []; for(let i of [1,2,3,4,5,6,7,8]) { // create a group of vertical lines x=i vline.push(board.create('line', [i, -1, 0], {visible: false})); // given [c,a,b] plot ax+by+c=0 // create the draggable points, each constrained to lie on one of the vertical lines answer.push(board.create('glider', [i,1, vline[i-1]], {color:'#003399',name: ""u""+i, showInfobox:false})); // answer.push(board.create('point', [i,1], {color:'#003399',name: ""pt""+i, showInfobox:false, snapToGrid:true})); // answer.push(board.create('slider',[[i,-10],[i,10],[-10,10,1]], {snapwidth:1, highline: {strokeWidth:5} }) ); } /************************************************************************************************/ // This function writes the x and y coordinates of the points in the array 'answer' to the field ans1 in the STACK-question. var defineValues = function() { var coords = []; for (let pts of answer) { coords.push(pts.Y()); }; return coords; }; // This function moves the points defined in array 'answer' to the positions based on the value in the answer field ans1. // This is needed for preserving the 'state' of the diagram ans happens after a student clicks ""Check""/""Prüfen"". var moveThingsAround = function() { var i = 1; console.log(ans); for (let pts of answer) { console.log(i); console.log(pts); pts.moveTo([ i , ans[i-1] ]); i++; }; }; // Read the values from the input-field ans1 to the array ans. // Then update the positions of the elements accordingly. if (doc.querySelector('input[id*=""_db_ans1""]').value!="""") { ans = JSON.parse( doc.querySelector('[id*=""_db_ans1""]').value ); moveThingsAround(); }; // If anything changes on the board, write the values of the array vals to the input-field. // The answers are always written as a maxima type 'list'. board.on('update', function () { var vals = defineValues(); doc.querySelector('[id*=""_db_ans1""]').value = ""["" + vals + ""]""; }); [[/jsxgraph]]","db_ans1: [5,4,3,2,1,0,-1,-2] [score]; prt1: prt1-1-T","db_ans1: [1,-0.06666734483506964,-1.0888892279730902,-2.1111111111111107,-2.866667005750868,-3.9777764214409723,-4.91111077202691,-6.155554877387154] [score]; prt1: prt1-1-T",1573853725,554722,1,"gradedright",1,1573848876,1489,"anon95","anonfirstname95","anonlastname95",1,"LGE Group GCG"
